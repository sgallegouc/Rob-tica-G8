//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `YoloObjects.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __YoloObjects_h__
#define __YoloObjects_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <CameraRGBDSimple.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompYoloObjects
{

class YoloObjects;
class YoloObjectsPrx;

}

namespace RoboCompYoloObjects
{

struct TBox
{
    int id;
    int type;
    int left;
    int top;
    int right;
    int bot;
    float score;
    float depth;
    float x;
    float y;
    float z;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&, const int&, const int&, const int&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(id, type, left, top, right, bot, score, depth, x, y, z);
    }
};

using TObjects = ::std::vector<TBox>;

using TObjectNames = ::std::vector<::std::string>;

struct TKeyPoint
{
    float x;
    float y;
    float z;
    int i;
    int j;
    float score;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const int&, const int&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z, i, j, score);
    }
};

using TJoints = ::std::map<int, TKeyPoint>;

struct TPerson
{
    int id;
    int box;
    ::RoboCompYoloObjects::TJoints joints;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const ::RoboCompYoloObjects::TJoints&> ice_tuple() const
    {
        return std::tie(id, box, joints);
    }
};

using TPeople = ::std::vector<TPerson>;

using TJointNames = ::std::map<int, ::std::string>;

struct TConnection
{
    int first;
    int second;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&> ice_tuple() const
    {
        return std::tie(first, second);
    }
};

using TConnections = ::std::vector<TConnection>;

struct TJointData
{
    ::RoboCompYoloObjects::TJointNames jointNames;
    ::RoboCompYoloObjects::TConnections connections;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompYoloObjects::TJointNames&, const ::RoboCompYoloObjects::TConnections&> ice_tuple() const
    {
        return std::tie(jointNames, connections);
    }
};

struct TData
{
    ::RoboCompYoloObjects::TObjects objects;
    ::RoboCompYoloObjects::TPeople people;
    int timestamp;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompYoloObjects::TObjects&, const ::RoboCompYoloObjects::TPeople&, const int&> ice_tuple() const
    {
        return std::tie(objects, people, timestamp);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompYoloObjects
{

class YoloObjects : public virtual ::Ice::Object
{
public:

    using ProxyType = YoloObjectsPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::RoboCompCameraRGBDSimple::TImage getImage(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getImage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TJointData getYoloJointData(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getYoloJointData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TObjectNames getYoloObjectNames(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getYoloObjectNames(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TData getYoloObjects(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getYoloObjects(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompYoloObjects
{

class YoloObjectsPrx : public virtual ::Ice::Proxy<YoloObjectsPrx, ::Ice::ObjectPrx>
{
public:

    ::RoboCompCameraRGBDSimple::TImage getImage(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompCameraRGBDSimple::TImage>(true, this, &YoloObjectsPrx::_iceI_getImage, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getImageAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCameraRGBDSimple::TImage>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCameraRGBDSimple::TImage, P>(false, this, &YoloObjectsPrx::_iceI_getImage, context);
    }

    ::std::function<void()>
    getImageAsync(::std::function<void(::RoboCompCameraRGBDSimple::TImage)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompCameraRGBDSimple::TImage>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompYoloObjects::YoloObjectsPrx::_iceI_getImage, context);
    }

    /// \cond INTERNAL
    void _iceI_getImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCameraRGBDSimple::TImage>>&, const ::Ice::Context&);
    /// \endcond

    TJointData getYoloJointData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompYoloObjects::TJointData>(true, this, &YoloObjectsPrx::_iceI_getYoloJointData, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getYoloJointDataAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompYoloObjects::TJointData>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompYoloObjects::TJointData, P>(false, this, &YoloObjectsPrx::_iceI_getYoloJointData, context);
    }

    ::std::function<void()>
    getYoloJointDataAsync(::std::function<void(::RoboCompYoloObjects::TJointData)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompYoloObjects::TJointData>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompYoloObjects::YoloObjectsPrx::_iceI_getYoloJointData, context);
    }

    /// \cond INTERNAL
    void _iceI_getYoloJointData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompYoloObjects::TJointData>>&, const ::Ice::Context&);
    /// \endcond

    TObjectNames getYoloObjectNames(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompYoloObjects::TObjectNames>(true, this, &YoloObjectsPrx::_iceI_getYoloObjectNames, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getYoloObjectNamesAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompYoloObjects::TObjectNames>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompYoloObjects::TObjectNames, P>(false, this, &YoloObjectsPrx::_iceI_getYoloObjectNames, context);
    }

    ::std::function<void()>
    getYoloObjectNamesAsync(::std::function<void(::RoboCompYoloObjects::TObjectNames)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompYoloObjects::TObjectNames>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompYoloObjects::YoloObjectsPrx::_iceI_getYoloObjectNames, context);
    }

    /// \cond INTERNAL
    void _iceI_getYoloObjectNames(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompYoloObjects::TObjectNames>>&, const ::Ice::Context&);
    /// \endcond

    TData getYoloObjects(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompYoloObjects::TData>(true, this, &YoloObjectsPrx::_iceI_getYoloObjects, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getYoloObjectsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompYoloObjects::TData>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompYoloObjects::TData, P>(false, this, &YoloObjectsPrx::_iceI_getYoloObjects, context);
    }

    ::std::function<void()>
    getYoloObjectsAsync(::std::function<void(::RoboCompYoloObjects::TData)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompYoloObjects::TData>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompYoloObjects::YoloObjectsPrx::_iceI_getYoloObjects, context);
    }

    /// \cond INTERNAL
    void _iceI_getYoloObjects(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompYoloObjects::TData>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    YoloObjectsPrx() = default;
    friend ::std::shared_ptr<YoloObjectsPrx> IceInternal::createProxy<YoloObjectsPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompYoloObjects::TBox>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 44;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompYoloObjects::TBox, S>
{
    static void read(S* istr, ::RoboCompYoloObjects::TBox& v)
    {
        istr->readAll(v.id, v.type, v.left, v.top, v.right, v.bot, v.score, v.depth, v.x, v.y, v.z);
    }
};

template<>
struct StreamableTraits<::RoboCompYoloObjects::TKeyPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompYoloObjects::TKeyPoint, S>
{
    static void read(S* istr, ::RoboCompYoloObjects::TKeyPoint& v)
    {
        istr->readAll(v.x, v.y, v.z, v.i, v.j, v.score);
    }
};

template<>
struct StreamableTraits<::RoboCompYoloObjects::TPerson>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompYoloObjects::TPerson, S>
{
    static void read(S* istr, ::RoboCompYoloObjects::TPerson& v)
    {
        istr->readAll(v.id, v.box, v.joints);
    }
};

template<>
struct StreamableTraits<::RoboCompYoloObjects::TConnection>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompYoloObjects::TConnection, S>
{
    static void read(S* istr, ::RoboCompYoloObjects::TConnection& v)
    {
        istr->readAll(v.first, v.second);
    }
};

template<>
struct StreamableTraits<::RoboCompYoloObjects::TJointData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompYoloObjects::TJointData, S>
{
    static void read(S* istr, ::RoboCompYoloObjects::TJointData& v)
    {
        istr->readAll(v.jointNames, v.connections);
    }
};

template<>
struct StreamableTraits<::RoboCompYoloObjects::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompYoloObjects::TData, S>
{
    static void read(S* istr, ::RoboCompYoloObjects::TData& v)
    {
        istr->readAll(v.objects, v.people, v.timestamp);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompYoloObjects
{

using YoloObjectsPtr = ::std::shared_ptr<YoloObjects>;
using YoloObjectsPrxPtr = ::std::shared_ptr<YoloObjectsPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompYoloObjects
{

class YoloObjects;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< YoloObjects>&);
::IceProxy::Ice::Object* upCast(YoloObjects*);
/// \endcond

}

}

namespace RoboCompYoloObjects
{

class YoloObjects;
/// \cond INTERNAL
::Ice::Object* upCast(YoloObjects*);
/// \endcond
typedef ::IceInternal::Handle< YoloObjects> YoloObjectsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompYoloObjects::YoloObjects> YoloObjectsPrx;
typedef YoloObjectsPrx YoloObjectsPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(YoloObjectsPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompYoloObjects
{

struct TBox
{
    ::Ice::Int id;
    ::Ice::Int type;
    ::Ice::Int left;
    ::Ice::Int top;
    ::Ice::Int right;
    ::Ice::Int bot;
    ::Ice::Float score;
    ::Ice::Float depth;
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
};

typedef ::std::vector<TBox> TObjects;

typedef ::std::vector< ::std::string> TObjectNames;

struct TKeyPoint
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Int i;
    ::Ice::Int j;
    ::Ice::Float score;
};

typedef ::std::map< ::Ice::Int, TKeyPoint> TJoints;

struct TPerson
{
    ::Ice::Int id;
    ::Ice::Int box;
    ::RoboCompYoloObjects::TJoints joints;
};

typedef ::std::vector<TPerson> TPeople;

typedef ::std::map< ::Ice::Int, ::std::string> TJointNames;

struct TConnection
{
    ::Ice::Int first;
    ::Ice::Int second;

    bool operator==(const TConnection& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(first != rhs_.first)
        {
            return false;
        }
        if(second != rhs_.second)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TConnection& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(first < rhs_.first)
        {
            return true;
        }
        else if(rhs_.first < first)
        {
            return false;
        }
        if(second < rhs_.second)
        {
            return true;
        }
        else if(rhs_.second < second)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TConnection& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const TConnection& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const TConnection& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const TConnection& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<TConnection> TConnections;

struct TJointData
{
    ::RoboCompYoloObjects::TJointNames jointNames;
    ::RoboCompYoloObjects::TConnections connections;
};

struct TData
{
    ::RoboCompYoloObjects::TObjects objects;
    ::RoboCompYoloObjects::TPeople people;
    ::Ice::Int timestamp;
};

}

namespace RoboCompYoloObjects
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompYoloObjects::YoloObjects::begin_getImage.
 * Create a wrapper instance by calling ::RoboCompYoloObjects::newCallback_YoloObjects_getImage.
 */
class Callback_YoloObjects_getImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YoloObjects_getImage_Base> Callback_YoloObjects_getImagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloJointData.
 * Create a wrapper instance by calling ::RoboCompYoloObjects::newCallback_YoloObjects_getYoloJointData.
 */
class Callback_YoloObjects_getYoloJointData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YoloObjects_getYoloJointData_Base> Callback_YoloObjects_getYoloJointDataPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjectNames.
 * Create a wrapper instance by calling ::RoboCompYoloObjects::newCallback_YoloObjects_getYoloObjectNames.
 */
class Callback_YoloObjects_getYoloObjectNames_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YoloObjects_getYoloObjectNames_Base> Callback_YoloObjects_getYoloObjectNamesPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjects.
 * Create a wrapper instance by calling ::RoboCompYoloObjects::newCallback_YoloObjects_getYoloObjects.
 */
class Callback_YoloObjects_getYoloObjects_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YoloObjects_getYoloObjects_Base> Callback_YoloObjects_getYoloObjectsPtr;

}

namespace IceProxy
{

namespace RoboCompYoloObjects
{

class YoloObjects : public virtual ::Ice::Proxy<YoloObjects, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompCameraRGBDSimple::TImage getImage(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getImage(_iceI_begin_getImage(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getImage(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::RoboCompYoloObjects::Callback_YoloObjects_getImagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& context, const ::RoboCompYoloObjects::Callback_YoloObjects_getImagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(context, cb, cookie);
    }

    ::RoboCompCameraRGBDSimple::TImage end_getImage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getImage(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompYoloObjects::TJointData getYoloJointData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getYoloJointData(_iceI_begin_getYoloJointData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getYoloJointData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getYoloJointData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYoloJointData(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYoloJointData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYoloJointData(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYoloJointData(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYoloJointData(const ::RoboCompYoloObjects::Callback_YoloObjects_getYoloJointDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYoloJointData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYoloJointData(const ::Ice::Context& context, const ::RoboCompYoloObjects::Callback_YoloObjects_getYoloJointDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYoloJointData(context, cb, cookie);
    }

    ::RoboCompYoloObjects::TJointData end_getYoloJointData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getYoloJointData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompYoloObjects::TObjectNames getYoloObjectNames(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getYoloObjectNames(_iceI_begin_getYoloObjectNames(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getYoloObjectNames(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getYoloObjectNames(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYoloObjectNames(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYoloObjectNames(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYoloObjectNames(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYoloObjectNames(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYoloObjectNames(const ::RoboCompYoloObjects::Callback_YoloObjects_getYoloObjectNamesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYoloObjectNames(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYoloObjectNames(const ::Ice::Context& context, const ::RoboCompYoloObjects::Callback_YoloObjects_getYoloObjectNamesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYoloObjectNames(context, cb, cookie);
    }

    ::RoboCompYoloObjects::TObjectNames end_getYoloObjectNames(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getYoloObjectNames(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompYoloObjects::TData getYoloObjects(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getYoloObjects(_iceI_begin_getYoloObjects(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getYoloObjects(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getYoloObjects(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYoloObjects(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYoloObjects(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYoloObjects(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYoloObjects(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYoloObjects(const ::RoboCompYoloObjects::Callback_YoloObjects_getYoloObjectsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYoloObjects(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYoloObjects(const ::Ice::Context& context, const ::RoboCompYoloObjects::Callback_YoloObjects_getYoloObjectsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYoloObjects(context, cb, cookie);
    }

    ::RoboCompYoloObjects::TData end_getYoloObjects(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getYoloObjects(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompYoloObjects
{

class YoloObjects : public virtual ::Ice::Object
{
public:

    typedef YoloObjectsPrx ProxyType;
    typedef YoloObjectsPtr PointerType;

    virtual ~YoloObjects();

#ifdef ICE_CPP11_COMPILER
    YoloObjects() = default;
    YoloObjects(const YoloObjects&) = default;
    YoloObjects& operator=(const YoloObjects&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::RoboCompCameraRGBDSimple::TImage getImage(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getImage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TJointData getYoloJointData(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getYoloJointData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TObjectNames getYoloObjectNames(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getYoloObjectNames(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TData getYoloObjects(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getYoloObjects(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const YoloObjects& lhs, const YoloObjects& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const YoloObjects& lhs, const YoloObjects& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompYoloObjects::TBox>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 44;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompYoloObjects::TBox, S>
{
    static void write(S* ostr, const ::RoboCompYoloObjects::TBox& v)
    {
        ostr->write(v.id);
        ostr->write(v.type);
        ostr->write(v.left);
        ostr->write(v.top);
        ostr->write(v.right);
        ostr->write(v.bot);
        ostr->write(v.score);
        ostr->write(v.depth);
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
    }
};

template<typename S>
struct StreamReader< ::RoboCompYoloObjects::TBox, S>
{
    static void read(S* istr, ::RoboCompYoloObjects::TBox& v)
    {
        istr->read(v.id);
        istr->read(v.type);
        istr->read(v.left);
        istr->read(v.top);
        istr->read(v.right);
        istr->read(v.bot);
        istr->read(v.score);
        istr->read(v.depth);
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
    }
};

template<>
struct StreamableTraits< ::RoboCompYoloObjects::TKeyPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompYoloObjects::TKeyPoint, S>
{
    static void write(S* ostr, const ::RoboCompYoloObjects::TKeyPoint& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.i);
        ostr->write(v.j);
        ostr->write(v.score);
    }
};

template<typename S>
struct StreamReader< ::RoboCompYoloObjects::TKeyPoint, S>
{
    static void read(S* istr, ::RoboCompYoloObjects::TKeyPoint& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.i);
        istr->read(v.j);
        istr->read(v.score);
    }
};

template<>
struct StreamableTraits< ::RoboCompYoloObjects::TPerson>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompYoloObjects::TPerson, S>
{
    static void write(S* ostr, const ::RoboCompYoloObjects::TPerson& v)
    {
        ostr->write(v.id);
        ostr->write(v.box);
        ostr->write(v.joints);
    }
};

template<typename S>
struct StreamReader< ::RoboCompYoloObjects::TPerson, S>
{
    static void read(S* istr, ::RoboCompYoloObjects::TPerson& v)
    {
        istr->read(v.id);
        istr->read(v.box);
        istr->read(v.joints);
    }
};

template<>
struct StreamableTraits< ::RoboCompYoloObjects::TConnection>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompYoloObjects::TConnection, S>
{
    static void write(S* ostr, const ::RoboCompYoloObjects::TConnection& v)
    {
        ostr->write(v.first);
        ostr->write(v.second);
    }
};

template<typename S>
struct StreamReader< ::RoboCompYoloObjects::TConnection, S>
{
    static void read(S* istr, ::RoboCompYoloObjects::TConnection& v)
    {
        istr->read(v.first);
        istr->read(v.second);
    }
};

template<>
struct StreamableTraits< ::RoboCompYoloObjects::TJointData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompYoloObjects::TJointData, S>
{
    static void write(S* ostr, const ::RoboCompYoloObjects::TJointData& v)
    {
        ostr->write(v.jointNames);
        ostr->write(v.connections);
    }
};

template<typename S>
struct StreamReader< ::RoboCompYoloObjects::TJointData, S>
{
    static void read(S* istr, ::RoboCompYoloObjects::TJointData& v)
    {
        istr->read(v.jointNames);
        istr->read(v.connections);
    }
};

template<>
struct StreamableTraits< ::RoboCompYoloObjects::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompYoloObjects::TData, S>
{
    static void write(S* ostr, const ::RoboCompYoloObjects::TData& v)
    {
        ostr->write(v.objects);
        ostr->write(v.people);
        ostr->write(v.timestamp);
    }
};

template<typename S>
struct StreamReader< ::RoboCompYoloObjects::TData, S>
{
    static void read(S* istr, ::RoboCompYoloObjects::TData& v)
    {
        istr->read(v.objects);
        istr->read(v.people);
        istr->read(v.timestamp);
    }
};

}
/// \endcond

namespace RoboCompYoloObjects
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompYoloObjects::YoloObjects::begin_getImage.
 * Create a wrapper instance by calling ::RoboCompYoloObjects::newCallback_YoloObjects_getImage.
 */
template<class T>
class CallbackNC_YoloObjects_getImage : public Callback_YoloObjects_getImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCameraRGBDSimple::TImage&);

    CallbackNC_YoloObjects_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        YoloObjectsPrx proxy = YoloObjectsPrx::uncheckedCast(result->getProxy());
        ::RoboCompCameraRGBDSimple::TImage ret;
        try
        {
            ret = proxy->end_getImage(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getImage.
 */
template<class T> Callback_YoloObjects_getImagePtr
newCallback_YoloObjects_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCameraRGBDSimple::TImage&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YoloObjects_getImage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getImage.
 */
template<class T> Callback_YoloObjects_getImagePtr
newCallback_YoloObjects_getImage(T* instance, void (T::*cb)(const ::RoboCompCameraRGBDSimple::TImage&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YoloObjects_getImage<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompYoloObjects::YoloObjects::begin_getImage.
 * Create a wrapper instance by calling ::RoboCompYoloObjects::newCallback_YoloObjects_getImage.
 */
template<class T, typename CT>
class Callback_YoloObjects_getImage : public Callback_YoloObjects_getImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCameraRGBDSimple::TImage&, const CT&);

    Callback_YoloObjects_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        YoloObjectsPrx proxy = YoloObjectsPrx::uncheckedCast(result->getProxy());
        ::RoboCompCameraRGBDSimple::TImage ret;
        try
        {
            ret = proxy->end_getImage(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getImage.
 */
template<class T, typename CT> Callback_YoloObjects_getImagePtr
newCallback_YoloObjects_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCameraRGBDSimple::TImage&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YoloObjects_getImage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getImage.
 */
template<class T, typename CT> Callback_YoloObjects_getImagePtr
newCallback_YoloObjects_getImage(T* instance, void (T::*cb)(const ::RoboCompCameraRGBDSimple::TImage&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YoloObjects_getImage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloJointData.
 * Create a wrapper instance by calling ::RoboCompYoloObjects::newCallback_YoloObjects_getYoloJointData.
 */
template<class T>
class CallbackNC_YoloObjects_getYoloJointData : public Callback_YoloObjects_getYoloJointData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TJointData&);

    CallbackNC_YoloObjects_getYoloJointData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        YoloObjectsPrx proxy = YoloObjectsPrx::uncheckedCast(result->getProxy());
        TJointData ret;
        try
        {
            ret = proxy->end_getYoloJointData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloJointData.
 */
template<class T> Callback_YoloObjects_getYoloJointDataPtr
newCallback_YoloObjects_getYoloJointData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TJointData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YoloObjects_getYoloJointData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloJointData.
 */
template<class T> Callback_YoloObjects_getYoloJointDataPtr
newCallback_YoloObjects_getYoloJointData(T* instance, void (T::*cb)(const TJointData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YoloObjects_getYoloJointData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloJointData.
 * Create a wrapper instance by calling ::RoboCompYoloObjects::newCallback_YoloObjects_getYoloJointData.
 */
template<class T, typename CT>
class Callback_YoloObjects_getYoloJointData : public Callback_YoloObjects_getYoloJointData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TJointData&, const CT&);

    Callback_YoloObjects_getYoloJointData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        YoloObjectsPrx proxy = YoloObjectsPrx::uncheckedCast(result->getProxy());
        TJointData ret;
        try
        {
            ret = proxy->end_getYoloJointData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloJointData.
 */
template<class T, typename CT> Callback_YoloObjects_getYoloJointDataPtr
newCallback_YoloObjects_getYoloJointData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TJointData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YoloObjects_getYoloJointData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloJointData.
 */
template<class T, typename CT> Callback_YoloObjects_getYoloJointDataPtr
newCallback_YoloObjects_getYoloJointData(T* instance, void (T::*cb)(const TJointData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YoloObjects_getYoloJointData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjectNames.
 * Create a wrapper instance by calling ::RoboCompYoloObjects::newCallback_YoloObjects_getYoloObjectNames.
 */
template<class T>
class CallbackNC_YoloObjects_getYoloObjectNames : public Callback_YoloObjects_getYoloObjectNames_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TObjectNames&);

    CallbackNC_YoloObjects_getYoloObjectNames(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        YoloObjectsPrx proxy = YoloObjectsPrx::uncheckedCast(result->getProxy());
        TObjectNames ret;
        try
        {
            ret = proxy->end_getYoloObjectNames(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjectNames.
 */
template<class T> Callback_YoloObjects_getYoloObjectNamesPtr
newCallback_YoloObjects_getYoloObjectNames(const IceUtil::Handle<T>& instance, void (T::*cb)(const TObjectNames&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YoloObjects_getYoloObjectNames<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjectNames.
 */
template<class T> Callback_YoloObjects_getYoloObjectNamesPtr
newCallback_YoloObjects_getYoloObjectNames(T* instance, void (T::*cb)(const TObjectNames&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YoloObjects_getYoloObjectNames<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjectNames.
 * Create a wrapper instance by calling ::RoboCompYoloObjects::newCallback_YoloObjects_getYoloObjectNames.
 */
template<class T, typename CT>
class Callback_YoloObjects_getYoloObjectNames : public Callback_YoloObjects_getYoloObjectNames_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TObjectNames&, const CT&);

    Callback_YoloObjects_getYoloObjectNames(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        YoloObjectsPrx proxy = YoloObjectsPrx::uncheckedCast(result->getProxy());
        TObjectNames ret;
        try
        {
            ret = proxy->end_getYoloObjectNames(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjectNames.
 */
template<class T, typename CT> Callback_YoloObjects_getYoloObjectNamesPtr
newCallback_YoloObjects_getYoloObjectNames(const IceUtil::Handle<T>& instance, void (T::*cb)(const TObjectNames&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YoloObjects_getYoloObjectNames<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjectNames.
 */
template<class T, typename CT> Callback_YoloObjects_getYoloObjectNamesPtr
newCallback_YoloObjects_getYoloObjectNames(T* instance, void (T::*cb)(const TObjectNames&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YoloObjects_getYoloObjectNames<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjects.
 * Create a wrapper instance by calling ::RoboCompYoloObjects::newCallback_YoloObjects_getYoloObjects.
 */
template<class T>
class CallbackNC_YoloObjects_getYoloObjects : public Callback_YoloObjects_getYoloObjects_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TData&);

    CallbackNC_YoloObjects_getYoloObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        YoloObjectsPrx proxy = YoloObjectsPrx::uncheckedCast(result->getProxy());
        TData ret;
        try
        {
            ret = proxy->end_getYoloObjects(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjects.
 */
template<class T> Callback_YoloObjects_getYoloObjectsPtr
newCallback_YoloObjects_getYoloObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const TData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YoloObjects_getYoloObjects<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjects.
 */
template<class T> Callback_YoloObjects_getYoloObjectsPtr
newCallback_YoloObjects_getYoloObjects(T* instance, void (T::*cb)(const TData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YoloObjects_getYoloObjects<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjects.
 * Create a wrapper instance by calling ::RoboCompYoloObjects::newCallback_YoloObjects_getYoloObjects.
 */
template<class T, typename CT>
class Callback_YoloObjects_getYoloObjects : public Callback_YoloObjects_getYoloObjects_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TData&, const CT&);

    Callback_YoloObjects_getYoloObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        YoloObjectsPrx proxy = YoloObjectsPrx::uncheckedCast(result->getProxy());
        TData ret;
        try
        {
            ret = proxy->end_getYoloObjects(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjects.
 */
template<class T, typename CT> Callback_YoloObjects_getYoloObjectsPtr
newCallback_YoloObjects_getYoloObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const TData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YoloObjects_getYoloObjects<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompYoloObjects::YoloObjects::begin_getYoloObjects.
 */
template<class T, typename CT> Callback_YoloObjects_getYoloObjectsPtr
newCallback_YoloObjects_getYoloObjects(T* instance, void (T::*cb)(const TData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YoloObjects_getYoloObjects<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
