//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `JointMotorSimple.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __JointMotorSimple_h__
#define __JointMotorSimple_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompJointMotorSimple
{

class JointMotorSimple;
class JointMotorSimplePrx;

}

namespace RoboCompJointMotorSimple
{

class HardwareFailedException : public ::Ice::UserExceptionHelper<HardwareFailedException, ::Ice::UserException>
{
public:

    virtual ~HardwareFailedException();

    HardwareFailedException(const HardwareFailedException&) = default;

    HardwareFailedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    HardwareFailedException(const ::std::string& what) :
        what(what)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string what;
};

/// \cond INTERNAL
static HardwareFailedException _iceS_HardwareFailedException_init;
/// \endcond

class OutOfRangeException : public ::Ice::UserExceptionHelper<OutOfRangeException, ::Ice::UserException>
{
public:

    virtual ~OutOfRangeException();

    OutOfRangeException(const OutOfRangeException&) = default;

    OutOfRangeException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    OutOfRangeException(const ::std::string& what) :
        what(what)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string what;
};

class UnknownMotorException : public ::Ice::UserExceptionHelper<UnknownMotorException, ::Ice::UserException>
{
public:

    virtual ~UnknownMotorException();

    UnknownMotorException(const UnknownMotorException&) = default;

    UnknownMotorException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    UnknownMotorException(const ::std::string& what) :
        what(what)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string what;
};

struct MotorState
{
    float pos;
    float vel;
    float power;
    ::std::string timeStamp;
    int p;
    int v;
    bool isMoving;
    int temperature;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const ::std::string&, const int&, const int&, const bool&, const int&> ice_tuple() const
    {
        return std::tie(pos, vel, power, timeStamp, p, v, isMoving, temperature);
    }
};

struct MotorParams
{
    ::std::string name;
    ::Ice::Byte busId;
    float minPos;
    float maxPos;
    float maxVelocity;
    float zeroPos;
    float stepsRange;
    float maxDegrees;
    bool invertedSign;
    float offset;
    float unitsRange;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::Ice::Byte&, const float&, const float&, const float&, const float&, const float&, const float&, const bool&, const float&, const float&> ice_tuple() const
    {
        return std::tie(name, busId, minPos, maxPos, maxVelocity, zeroPos, stepsRange, maxDegrees, invertedSign, offset, unitsRange);
    }
};

struct MotorGoalPosition
{
    float position;
    float maxSpeed;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&> ice_tuple() const
    {
        return std::tie(position, maxSpeed);
    }
};

struct MotorGoalVelocity
{
    float velocity;
    float maxAcc;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&> ice_tuple() const
    {
        return std::tie(velocity, maxAcc);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompJointMotorSimple
{

class JointMotorSimple : public virtual ::Ice::Object
{
public:

    using ProxyType = JointMotorSimplePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual MotorParams getMotorParams(::std::string motor, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getMotorParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual MotorState getMotorState(::std::string motor, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getMotorState(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setPosition(::std::string name, MotorGoalPosition goal, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setPosition(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setVelocity(::std::string name, MotorGoalVelocity goal, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setVelocity(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setZeroPos(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setZeroPos(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompJointMotorSimple
{

class JointMotorSimplePrx : public virtual ::Ice::Proxy<JointMotorSimplePrx, ::Ice::ObjectPrx>
{
public:

    MotorParams getMotorParams(const ::std::string& motor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompJointMotorSimple::MotorParams>(true, this, &JointMotorSimplePrx::_iceI_getMotorParams, motor, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getMotorParamsAsync(const ::std::string& motor, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompJointMotorSimple::MotorParams>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompJointMotorSimple::MotorParams, P>(false, this, &JointMotorSimplePrx::_iceI_getMotorParams, motor, context);
    }

    ::std::function<void()>
    getMotorParamsAsync(const ::std::string& motor,
                        ::std::function<void(::RoboCompJointMotorSimple::MotorParams)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompJointMotorSimple::MotorParams>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompJointMotorSimple::JointMotorSimplePrx::_iceI_getMotorParams, motor, context);
    }

    /// \cond INTERNAL
    void _iceI_getMotorParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotorSimple::MotorParams>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    MotorState getMotorState(const ::std::string& motor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompJointMotorSimple::MotorState>(true, this, &JointMotorSimplePrx::_iceI_getMotorState, motor, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getMotorStateAsync(const ::std::string& motor, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompJointMotorSimple::MotorState>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompJointMotorSimple::MotorState, P>(false, this, &JointMotorSimplePrx::_iceI_getMotorState, motor, context);
    }

    ::std::function<void()>
    getMotorStateAsync(const ::std::string& motor,
                       ::std::function<void(::RoboCompJointMotorSimple::MotorState)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompJointMotorSimple::MotorState>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompJointMotorSimple::JointMotorSimplePrx::_iceI_getMotorState, motor, context);
    }

    /// \cond INTERNAL
    void _iceI_getMotorState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotorSimple::MotorState>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void setPosition(const ::std::string& name, const MotorGoalPosition& goal, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &JointMotorSimplePrx::_iceI_setPosition, name, goal, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setPositionAsync(const ::std::string& name, const MotorGoalPosition& goal, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &JointMotorSimplePrx::_iceI_setPosition, name, goal, context);
    }

    ::std::function<void()>
    setPositionAsync(const ::std::string& name, const MotorGoalPosition& goal,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompJointMotorSimple::JointMotorSimplePrx::_iceI_setPosition, name, goal, context);
    }

    /// \cond INTERNAL
    void _iceI_setPosition(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const MotorGoalPosition&, const ::Ice::Context&);
    /// \endcond

    void setVelocity(const ::std::string& name, const MotorGoalVelocity& goal, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &JointMotorSimplePrx::_iceI_setVelocity, name, goal, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setVelocityAsync(const ::std::string& name, const MotorGoalVelocity& goal, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &JointMotorSimplePrx::_iceI_setVelocity, name, goal, context);
    }

    ::std::function<void()>
    setVelocityAsync(const ::std::string& name, const MotorGoalVelocity& goal,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompJointMotorSimple::JointMotorSimplePrx::_iceI_setVelocity, name, goal, context);
    }

    /// \cond INTERNAL
    void _iceI_setVelocity(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const MotorGoalVelocity&, const ::Ice::Context&);
    /// \endcond

    void setZeroPos(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &JointMotorSimplePrx::_iceI_setZeroPos, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setZeroPosAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &JointMotorSimplePrx::_iceI_setZeroPos, name, context);
    }

    ::std::function<void()>
    setZeroPosAsync(const ::std::string& name,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompJointMotorSimple::JointMotorSimplePrx::_iceI_setZeroPos, name, context);
    }

    /// \cond INTERNAL
    void _iceI_setZeroPos(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    JointMotorSimplePrx() = default;
    friend ::std::shared_ptr<JointMotorSimplePrx> IceInternal::createProxy<JointMotorSimplePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::RoboCompJointMotorSimple::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::HardwareFailedException& v)
    {
        istr->readAll(v.what);
    }
};

template<typename S>
struct StreamReader<::RoboCompJointMotorSimple::OutOfRangeException, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::OutOfRangeException& v)
    {
        istr->readAll(v.what);
    }
};

template<typename S>
struct StreamReader<::RoboCompJointMotorSimple::UnknownMotorException, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::UnknownMotorException& v)
    {
        istr->readAll(v.what);
    }
};

template<>
struct StreamableTraits<::RoboCompJointMotorSimple::MotorState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompJointMotorSimple::MotorState, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::MotorState& v)
    {
        istr->readAll(v.pos, v.vel, v.power, v.timeStamp, v.p, v.v, v.isMoving, v.temperature);
    }
};

template<>
struct StreamableTraits<::RoboCompJointMotorSimple::MotorParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 35;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompJointMotorSimple::MotorParams, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::MotorParams& v)
    {
        istr->readAll(v.name, v.busId, v.minPos, v.maxPos, v.maxVelocity, v.zeroPos, v.stepsRange, v.maxDegrees, v.invertedSign, v.offset, v.unitsRange);
    }
};

template<>
struct StreamableTraits<::RoboCompJointMotorSimple::MotorGoalPosition>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompJointMotorSimple::MotorGoalPosition, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::MotorGoalPosition& v)
    {
        istr->readAll(v.position, v.maxSpeed);
    }
};

template<>
struct StreamableTraits<::RoboCompJointMotorSimple::MotorGoalVelocity>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompJointMotorSimple::MotorGoalVelocity, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::MotorGoalVelocity& v)
    {
        istr->readAll(v.velocity, v.maxAcc);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompJointMotorSimple
{

using JointMotorSimplePtr = ::std::shared_ptr<JointMotorSimple>;
using JointMotorSimplePrxPtr = ::std::shared_ptr<JointMotorSimplePrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompJointMotorSimple
{

class JointMotorSimple;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< JointMotorSimple>&);
::IceProxy::Ice::Object* upCast(JointMotorSimple*);
/// \endcond

}

}

namespace RoboCompJointMotorSimple
{

class JointMotorSimple;
/// \cond INTERNAL
::Ice::Object* upCast(JointMotorSimple*);
/// \endcond
typedef ::IceInternal::Handle< JointMotorSimple> JointMotorSimplePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJointMotorSimple::JointMotorSimple> JointMotorSimplePrx;
typedef JointMotorSimplePrx JointMotorSimplePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(JointMotorSimplePtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompJointMotorSimple
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit HardwareFailedException(const ::std::string& what);

#ifdef ICE_CPP11_COMPILER
    HardwareFailedException(const HardwareFailedException&) = default;
    virtual ~HardwareFailedException();
#else
    virtual ~HardwareFailedException() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual HardwareFailedException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string what;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static HardwareFailedException _iceS_HardwareFailedException_init;
/// \endcond

class OutOfRangeException : public ::Ice::UserException
{
public:

    OutOfRangeException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit OutOfRangeException(const ::std::string& what);

#ifdef ICE_CPP11_COMPILER
    OutOfRangeException(const OutOfRangeException&) = default;
    virtual ~OutOfRangeException();
#else
    virtual ~OutOfRangeException() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual OutOfRangeException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string what;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class UnknownMotorException : public ::Ice::UserException
{
public:

    UnknownMotorException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit UnknownMotorException(const ::std::string& what);

#ifdef ICE_CPP11_COMPILER
    UnknownMotorException(const UnknownMotorException&) = default;
    virtual ~UnknownMotorException();
#else
    virtual ~UnknownMotorException() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual UnknownMotorException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string what;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

struct MotorState
{
    ::Ice::Float pos;
    ::Ice::Float vel;
    ::Ice::Float power;
    ::std::string timeStamp;
    ::Ice::Int p;
    ::Ice::Int v;
    bool isMoving;
    ::Ice::Int temperature;
};

struct MotorParams
{
    ::std::string name;
    ::Ice::Byte busId;
    ::Ice::Float minPos;
    ::Ice::Float maxPos;
    ::Ice::Float maxVelocity;
    ::Ice::Float zeroPos;
    ::Ice::Float stepsRange;
    ::Ice::Float maxDegrees;
    bool invertedSign;
    ::Ice::Float offset;
    ::Ice::Float unitsRange;
};

struct MotorGoalPosition
{
    ::Ice::Float position;
    ::Ice::Float maxSpeed;
};

struct MotorGoalVelocity
{
    ::Ice::Float velocity;
    ::Ice::Float maxAcc;
};

}

namespace RoboCompJointMotorSimple
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorParams.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_getMotorParams.
 */
class Callback_JointMotorSimple_getMotorParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotorSimple_getMotorParams_Base> Callback_JointMotorSimple_getMotorParamsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorState.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_getMotorState.
 */
class Callback_JointMotorSimple_getMotorState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotorSimple_getMotorState_Base> Callback_JointMotorSimple_getMotorStatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setPosition.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_setPosition.
 */
class Callback_JointMotorSimple_setPosition_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotorSimple_setPosition_Base> Callback_JointMotorSimple_setPositionPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setVelocity.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_setVelocity.
 */
class Callback_JointMotorSimple_setVelocity_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotorSimple_setVelocity_Base> Callback_JointMotorSimple_setVelocityPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setZeroPos.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_setZeroPos.
 */
class Callback_JointMotorSimple_setZeroPos_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotorSimple_setZeroPos_Base> Callback_JointMotorSimple_setZeroPosPtr;

}

namespace IceProxy
{

namespace RoboCompJointMotorSimple
{

class JointMotorSimple : public virtual ::Ice::Proxy<JointMotorSimple, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompJointMotorSimple::MotorParams getMotorParams(const ::std::string& motor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getMotorParams(_iceI_begin_getMotorParams(motor, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& motor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getMotorParams(motor, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& motor, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorParams(motor, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& motor, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorParams(motor, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& motor, const ::RoboCompJointMotorSimple::Callback_JointMotorSimple_getMotorParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorParams(motor, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& motor, const ::Ice::Context& context, const ::RoboCompJointMotorSimple::Callback_JointMotorSimple_getMotorParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorParams(motor, context, cb, cookie);
    }

    ::RoboCompJointMotorSimple::MotorParams end_getMotorParams(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getMotorParams(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompJointMotorSimple::MotorState getMotorState(const ::std::string& motor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getMotorState(_iceI_begin_getMotorState(motor, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& motor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getMotorState(motor, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& motor, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorState(motor, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& motor, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorState(motor, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& motor, const ::RoboCompJointMotorSimple::Callback_JointMotorSimple_getMotorStatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorState(motor, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& motor, const ::Ice::Context& context, const ::RoboCompJointMotorSimple::Callback_JointMotorSimple_getMotorStatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorState(motor, context, cb, cookie);
    }

    ::RoboCompJointMotorSimple::MotorState end_getMotorState(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getMotorState(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setPosition(const ::std::string& name, const ::RoboCompJointMotorSimple::MotorGoalPosition& goal, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setPosition(_iceI_begin_setPosition(name, goal, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::std::string& name, const ::RoboCompJointMotorSimple::MotorGoalPosition& goal, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setPosition(name, goal, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::std::string& name, const ::RoboCompJointMotorSimple::MotorGoalPosition& goal, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPosition(name, goal, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::std::string& name, const ::RoboCompJointMotorSimple::MotorGoalPosition& goal, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPosition(name, goal, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::std::string& name, const ::RoboCompJointMotorSimple::MotorGoalPosition& goal, const ::RoboCompJointMotorSimple::Callback_JointMotorSimple_setPositionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPosition(name, goal, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::std::string& name, const ::RoboCompJointMotorSimple::MotorGoalPosition& goal, const ::Ice::Context& context, const ::RoboCompJointMotorSimple::Callback_JointMotorSimple_setPositionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPosition(name, goal, context, cb, cookie);
    }

    void end_setPosition(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setPosition(const ::std::string&, const ::RoboCompJointMotorSimple::MotorGoalPosition&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setVelocity(const ::std::string& name, const ::RoboCompJointMotorSimple::MotorGoalVelocity& goal, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setVelocity(_iceI_begin_setVelocity(name, goal, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::std::string& name, const ::RoboCompJointMotorSimple::MotorGoalVelocity& goal, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setVelocity(name, goal, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::std::string& name, const ::RoboCompJointMotorSimple::MotorGoalVelocity& goal, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVelocity(name, goal, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::std::string& name, const ::RoboCompJointMotorSimple::MotorGoalVelocity& goal, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVelocity(name, goal, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::std::string& name, const ::RoboCompJointMotorSimple::MotorGoalVelocity& goal, const ::RoboCompJointMotorSimple::Callback_JointMotorSimple_setVelocityPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVelocity(name, goal, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::std::string& name, const ::RoboCompJointMotorSimple::MotorGoalVelocity& goal, const ::Ice::Context& context, const ::RoboCompJointMotorSimple::Callback_JointMotorSimple_setVelocityPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVelocity(name, goal, context, cb, cookie);
    }

    void end_setVelocity(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setVelocity(const ::std::string&, const ::RoboCompJointMotorSimple::MotorGoalVelocity&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setZeroPos(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setZeroPos(_iceI_begin_setZeroPos(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setZeroPos(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setZeroPos(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setZeroPos(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& name, const ::RoboCompJointMotorSimple::Callback_JointMotorSimple_setZeroPosPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setZeroPos(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& name, const ::Ice::Context& context, const ::RoboCompJointMotorSimple::Callback_JointMotorSimple_setZeroPosPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setZeroPos(name, context, cb, cookie);
    }

    void end_setZeroPos(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setZeroPos(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompJointMotorSimple
{

class JointMotorSimple : public virtual ::Ice::Object
{
public:

    typedef JointMotorSimplePrx ProxyType;
    typedef JointMotorSimplePtr PointerType;

    virtual ~JointMotorSimple();

#ifdef ICE_CPP11_COMPILER
    JointMotorSimple() = default;
    JointMotorSimple(const JointMotorSimple&) = default;
    JointMotorSimple& operator=(const JointMotorSimple&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual MotorParams getMotorParams(const ::std::string& motor, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getMotorParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual MotorState getMotorState(const ::std::string& motor, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getMotorState(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setPosition(const ::std::string& name, const MotorGoalPosition& goal, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setPosition(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setVelocity(const ::std::string& name, const MotorGoalVelocity& goal, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setVelocity(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setZeroPos(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setZeroPos(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const JointMotorSimple& lhs, const JointMotorSimple& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const JointMotorSimple& lhs, const JointMotorSimple& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompJointMotorSimple::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotorSimple::HardwareFailedException, S>
{
    static void write(S* ostr, const ::RoboCompJointMotorSimple::HardwareFailedException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotorSimple::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::HardwareFailedException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotorSimple::OutOfRangeException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotorSimple::OutOfRangeException, S>
{
    static void write(S* ostr, const ::RoboCompJointMotorSimple::OutOfRangeException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotorSimple::OutOfRangeException, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::OutOfRangeException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotorSimple::UnknownMotorException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotorSimple::UnknownMotorException, S>
{
    static void write(S* ostr, const ::RoboCompJointMotorSimple::UnknownMotorException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotorSimple::UnknownMotorException, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::UnknownMotorException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotorSimple::MotorState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotorSimple::MotorState, S>
{
    static void write(S* ostr, const ::RoboCompJointMotorSimple::MotorState& v)
    {
        ostr->write(v.pos);
        ostr->write(v.vel);
        ostr->write(v.power);
        ostr->write(v.timeStamp);
        ostr->write(v.p);
        ostr->write(v.v);
        ostr->write(v.isMoving);
        ostr->write(v.temperature);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotorSimple::MotorState, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::MotorState& v)
    {
        istr->read(v.pos);
        istr->read(v.vel);
        istr->read(v.power);
        istr->read(v.timeStamp);
        istr->read(v.p);
        istr->read(v.v);
        istr->read(v.isMoving);
        istr->read(v.temperature);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotorSimple::MotorParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 35;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotorSimple::MotorParams, S>
{
    static void write(S* ostr, const ::RoboCompJointMotorSimple::MotorParams& v)
    {
        ostr->write(v.name);
        ostr->write(v.busId);
        ostr->write(v.minPos);
        ostr->write(v.maxPos);
        ostr->write(v.maxVelocity);
        ostr->write(v.zeroPos);
        ostr->write(v.stepsRange);
        ostr->write(v.maxDegrees);
        ostr->write(v.invertedSign);
        ostr->write(v.offset);
        ostr->write(v.unitsRange);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotorSimple::MotorParams, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::MotorParams& v)
    {
        istr->read(v.name);
        istr->read(v.busId);
        istr->read(v.minPos);
        istr->read(v.maxPos);
        istr->read(v.maxVelocity);
        istr->read(v.zeroPos);
        istr->read(v.stepsRange);
        istr->read(v.maxDegrees);
        istr->read(v.invertedSign);
        istr->read(v.offset);
        istr->read(v.unitsRange);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotorSimple::MotorGoalPosition>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotorSimple::MotorGoalPosition, S>
{
    static void write(S* ostr, const ::RoboCompJointMotorSimple::MotorGoalPosition& v)
    {
        ostr->write(v.position);
        ostr->write(v.maxSpeed);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotorSimple::MotorGoalPosition, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::MotorGoalPosition& v)
    {
        istr->read(v.position);
        istr->read(v.maxSpeed);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotorSimple::MotorGoalVelocity>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotorSimple::MotorGoalVelocity, S>
{
    static void write(S* ostr, const ::RoboCompJointMotorSimple::MotorGoalVelocity& v)
    {
        ostr->write(v.velocity);
        ostr->write(v.maxAcc);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotorSimple::MotorGoalVelocity, S>
{
    static void read(S* istr, ::RoboCompJointMotorSimple::MotorGoalVelocity& v)
    {
        istr->read(v.velocity);
        istr->read(v.maxAcc);
    }
};

}
/// \endcond

namespace RoboCompJointMotorSimple
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorParams.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_getMotorParams.
 */
template<class T>
class CallbackNC_JointMotorSimple_getMotorParams : public Callback_JointMotorSimple_getMotorParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const MotorParams&);

    CallbackNC_JointMotorSimple_getMotorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        JointMotorSimplePrx proxy = JointMotorSimplePrx::uncheckedCast(result->getProxy());
        MotorParams ret;
        try
        {
            ret = proxy->end_getMotorParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorParams.
 */
template<class T> Callback_JointMotorSimple_getMotorParamsPtr
newCallback_JointMotorSimple_getMotorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const MotorParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_getMotorParams<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorParams.
 */
template<class T> Callback_JointMotorSimple_getMotorParamsPtr
newCallback_JointMotorSimple_getMotorParams(T* instance, void (T::*cb)(const MotorParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_getMotorParams<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorParams.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_getMotorParams.
 */
template<class T, typename CT>
class Callback_JointMotorSimple_getMotorParams : public Callback_JointMotorSimple_getMotorParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const MotorParams&, const CT&);

    Callback_JointMotorSimple_getMotorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        JointMotorSimplePrx proxy = JointMotorSimplePrx::uncheckedCast(result->getProxy());
        MotorParams ret;
        try
        {
            ret = proxy->end_getMotorParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorParams.
 */
template<class T, typename CT> Callback_JointMotorSimple_getMotorParamsPtr
newCallback_JointMotorSimple_getMotorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const MotorParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_getMotorParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorParams.
 */
template<class T, typename CT> Callback_JointMotorSimple_getMotorParamsPtr
newCallback_JointMotorSimple_getMotorParams(T* instance, void (T::*cb)(const MotorParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_getMotorParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorState.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_getMotorState.
 */
template<class T>
class CallbackNC_JointMotorSimple_getMotorState : public Callback_JointMotorSimple_getMotorState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const MotorState&);

    CallbackNC_JointMotorSimple_getMotorState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        JointMotorSimplePrx proxy = JointMotorSimplePrx::uncheckedCast(result->getProxy());
        MotorState ret;
        try
        {
            ret = proxy->end_getMotorState(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorState.
 */
template<class T> Callback_JointMotorSimple_getMotorStatePtr
newCallback_JointMotorSimple_getMotorState(const IceUtil::Handle<T>& instance, void (T::*cb)(const MotorState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_getMotorState<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorState.
 */
template<class T> Callback_JointMotorSimple_getMotorStatePtr
newCallback_JointMotorSimple_getMotorState(T* instance, void (T::*cb)(const MotorState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_getMotorState<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorState.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_getMotorState.
 */
template<class T, typename CT>
class Callback_JointMotorSimple_getMotorState : public Callback_JointMotorSimple_getMotorState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const MotorState&, const CT&);

    Callback_JointMotorSimple_getMotorState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        JointMotorSimplePrx proxy = JointMotorSimplePrx::uncheckedCast(result->getProxy());
        MotorState ret;
        try
        {
            ret = proxy->end_getMotorState(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorState.
 */
template<class T, typename CT> Callback_JointMotorSimple_getMotorStatePtr
newCallback_JointMotorSimple_getMotorState(const IceUtil::Handle<T>& instance, void (T::*cb)(const MotorState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_getMotorState<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_getMotorState.
 */
template<class T, typename CT> Callback_JointMotorSimple_getMotorStatePtr
newCallback_JointMotorSimple_getMotorState(T* instance, void (T::*cb)(const MotorState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_getMotorState<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setPosition.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_setPosition.
 */
template<class T>
class CallbackNC_JointMotorSimple_setPosition : public Callback_JointMotorSimple_setPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotorSimple_setPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        JointMotorSimplePrx proxy = JointMotorSimplePrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setPosition(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setPosition.
 */
template<class T> Callback_JointMotorSimple_setPositionPtr
newCallback_JointMotorSimple_setPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_setPosition<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setPosition.
 */
template<class T> Callback_JointMotorSimple_setPositionPtr
newCallback_JointMotorSimple_setPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_setPosition<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setPosition.
 */
template<class T> Callback_JointMotorSimple_setPositionPtr
newCallback_JointMotorSimple_setPosition(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_setPosition<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setPosition.
 */
template<class T> Callback_JointMotorSimple_setPositionPtr
newCallback_JointMotorSimple_setPosition(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_setPosition<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setPosition.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_setPosition.
 */
template<class T, typename CT>
class Callback_JointMotorSimple_setPosition : public Callback_JointMotorSimple_setPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotorSimple_setPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        JointMotorSimplePrx proxy = JointMotorSimplePrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setPosition(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setPosition.
 */
template<class T, typename CT> Callback_JointMotorSimple_setPositionPtr
newCallback_JointMotorSimple_setPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_setPosition<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setPosition.
 */
template<class T, typename CT> Callback_JointMotorSimple_setPositionPtr
newCallback_JointMotorSimple_setPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_setPosition<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setPosition.
 */
template<class T, typename CT> Callback_JointMotorSimple_setPositionPtr
newCallback_JointMotorSimple_setPosition(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_setPosition<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setPosition.
 */
template<class T, typename CT> Callback_JointMotorSimple_setPositionPtr
newCallback_JointMotorSimple_setPosition(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_setPosition<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setVelocity.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_setVelocity.
 */
template<class T>
class CallbackNC_JointMotorSimple_setVelocity : public Callback_JointMotorSimple_setVelocity_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotorSimple_setVelocity(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        JointMotorSimplePrx proxy = JointMotorSimplePrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setVelocity(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setVelocity.
 */
template<class T> Callback_JointMotorSimple_setVelocityPtr
newCallback_JointMotorSimple_setVelocity(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_setVelocity<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setVelocity.
 */
template<class T> Callback_JointMotorSimple_setVelocityPtr
newCallback_JointMotorSimple_setVelocity(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_setVelocity<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setVelocity.
 */
template<class T> Callback_JointMotorSimple_setVelocityPtr
newCallback_JointMotorSimple_setVelocity(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_setVelocity<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setVelocity.
 */
template<class T> Callback_JointMotorSimple_setVelocityPtr
newCallback_JointMotorSimple_setVelocity(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_setVelocity<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setVelocity.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_setVelocity.
 */
template<class T, typename CT>
class Callback_JointMotorSimple_setVelocity : public Callback_JointMotorSimple_setVelocity_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotorSimple_setVelocity(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        JointMotorSimplePrx proxy = JointMotorSimplePrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setVelocity(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setVelocity.
 */
template<class T, typename CT> Callback_JointMotorSimple_setVelocityPtr
newCallback_JointMotorSimple_setVelocity(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_setVelocity<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setVelocity.
 */
template<class T, typename CT> Callback_JointMotorSimple_setVelocityPtr
newCallback_JointMotorSimple_setVelocity(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_setVelocity<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setVelocity.
 */
template<class T, typename CT> Callback_JointMotorSimple_setVelocityPtr
newCallback_JointMotorSimple_setVelocity(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_setVelocity<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setVelocity.
 */
template<class T, typename CT> Callback_JointMotorSimple_setVelocityPtr
newCallback_JointMotorSimple_setVelocity(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_setVelocity<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setZeroPos.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_setZeroPos.
 */
template<class T>
class CallbackNC_JointMotorSimple_setZeroPos : public Callback_JointMotorSimple_setZeroPos_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotorSimple_setZeroPos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        JointMotorSimplePrx proxy = JointMotorSimplePrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setZeroPos(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setZeroPos.
 */
template<class T> Callback_JointMotorSimple_setZeroPosPtr
newCallback_JointMotorSimple_setZeroPos(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_setZeroPos<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setZeroPos.
 */
template<class T> Callback_JointMotorSimple_setZeroPosPtr
newCallback_JointMotorSimple_setZeroPos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_setZeroPos<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setZeroPos.
 */
template<class T> Callback_JointMotorSimple_setZeroPosPtr
newCallback_JointMotorSimple_setZeroPos(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_setZeroPos<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setZeroPos.
 */
template<class T> Callback_JointMotorSimple_setZeroPosPtr
newCallback_JointMotorSimple_setZeroPos(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorSimple_setZeroPos<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setZeroPos.
 * Create a wrapper instance by calling ::RoboCompJointMotorSimple::newCallback_JointMotorSimple_setZeroPos.
 */
template<class T, typename CT>
class Callback_JointMotorSimple_setZeroPos : public Callback_JointMotorSimple_setZeroPos_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotorSimple_setZeroPos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        JointMotorSimplePrx proxy = JointMotorSimplePrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setZeroPos(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setZeroPos.
 */
template<class T, typename CT> Callback_JointMotorSimple_setZeroPosPtr
newCallback_JointMotorSimple_setZeroPos(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_setZeroPos<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setZeroPos.
 */
template<class T, typename CT> Callback_JointMotorSimple_setZeroPosPtr
newCallback_JointMotorSimple_setZeroPos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_setZeroPos<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setZeroPos.
 */
template<class T, typename CT> Callback_JointMotorSimple_setZeroPosPtr
newCallback_JointMotorSimple_setZeroPos(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_setZeroPos<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompJointMotorSimple::JointMotorSimple::begin_setZeroPos.
 */
template<class T, typename CT> Callback_JointMotorSimple_setZeroPosPtr
newCallback_JointMotorSimple_setZeroPos(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorSimple_setZeroPos<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
